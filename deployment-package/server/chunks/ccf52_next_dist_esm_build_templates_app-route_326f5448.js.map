{"version":3,"sources":["turbopack:///[project]/botchat-pro/app/api/webhooks/whatsapp/route.ts","turbopack:///[project]/botchat-pro/node_modules/next/dist/esm/build/templates/app-route.js","turbopack:///[project]/botchat-pro/lib/bot-engine.ts","turbopack:///[project]/botchat-pro/lib/whatsapp.ts"],"sourcesContent":["// BotChat Pro - WhatsApp Webhook Handler\n// Handles incoming WhatsApp messages and webhook verification\n\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { prisma } from \"@/lib/prisma\";\nimport { validateWebhookSignature, normalizePhoneNumber } from \"@/lib/whatsapp\";\nimport { processIncomingMessage } from \"@/lib/bot-engine\";\n\n/**\n * GET - Webhook verification for WhatsApp\n */\nexport async function GET(request: NextRequest) {\n  const { searchParams } = new URL(request.url);\n  \n  const mode = searchParams.get(\"hub.mode\");\n  const token = searchParams.get(\"hub.verify_token\");\n  const challenge = searchParams.get(\"hub.challenge\");\n\n  // Verify webhook (WhatsApp requires this)\n  if (mode === \"subscribe\" && token === process.env.WHATSAPP_WEBHOOK_VERIFY_TOKEN) {\n    console.log(\"‚úÖ WhatsApp webhook verified\");\n    return new NextResponse(challenge, { status: 200 });\n  }\n\n  console.log(\"‚ùå WhatsApp webhook verification failed\");\n  return new NextResponse(\"Verification failed\", { status: 403 });\n}\n\n/**\n * POST - Handle incoming WhatsApp messages\n */\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.text();\n    const signature = request.headers.get(\"x-hub-signature-256\") || \"\";\n\n    // Validate webhook signature for security\n    if (!validateWebhookSignature(body, signature)) {\n      console.error(\"‚ùå Invalid webhook signature\");\n      return new NextResponse(\"Invalid signature\", { status: 401 });\n    }\n\n    const data = JSON.parse(body);\n    \n    // Process webhook data\n    await handleWebhookData(data);\n    \n    return new NextResponse(\"OK\", { status: 200 });\n  } catch (error) {\n    console.error(\"‚ùå Webhook processing error:\", error);\n    return new NextResponse(\"Internal Server Error\", { status: 500 });\n  }\n}\n\n/**\n * Handle the actual webhook data from WhatsApp\n */\nasync function handleWebhookData(data: any) {\n  if (!data.entry || !Array.isArray(data.entry)) {\n    console.log(\"‚ö†Ô∏è  No entries in webhook data\");\n    return;\n  }\n\n  for (const entry of data.entry) {\n    if (!entry.changes || !Array.isArray(entry.changes)) {\n      continue;\n    }\n\n    for (const change of entry.changes) {\n      if (change.field !== \"messages\") {\n        continue;\n      }\n\n      const { value } = change;\n      \n      // Handle incoming messages\n      if (value.messages && Array.isArray(value.messages)) {\n        for (const message of value.messages) {\n          await handleIncomingMessage(message, value.metadata);\n        }\n      }\n\n      // Handle message status updates\n      if (value.statuses && Array.isArray(value.statuses)) {\n        for (const status of value.statuses) {\n          await handleMessageStatus(status);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Handle incoming WhatsApp message\n */\nasync function handleIncomingMessage(message: any, metadata: any) {\n  try {\n    const phoneNumberId = metadata.phone_number_id;\n    const fromPhone = normalizePhoneNumber(message.from);\n    \n    console.log(`üì® Incoming message from ${fromPhone}:`, message.type);\n\n    // Find the bot for this phone number\n    const bot = await prisma.bot.findFirst({\n      where: {\n        whatsappPhoneId: phoneNumberId,\n        isActive: true,\n      },\n      include: {\n        flows: {\n          where: { isActive: true },\n          orderBy: { position: 'asc' },\n        },\n      },\n    });\n\n    if (!bot) {\n      console.log(`‚ö†Ô∏è  No active bot found for phone number ${phoneNumberId}`);\n      return;\n    }\n\n    // Store the incoming message\n    const messageRecord = await prisma.message.create({\n      data: {\n        direction: \"incoming\",\n        content: getMessageContent(message),\n        mediaUrl: await getMediaUrl(message),\n        mediaType: message.type !== \"text\" ? message.type : null,\n        contactPhone: fromPhone,\n        contactName: message.profile?.name || null,\n        whatsappMessageId: message.id,\n        botId: bot.id,\n      },\n    });\n\n    // Process the message through the bot engine\n    await processIncomingMessage(bot, message, messageRecord);\n    \n    console.log(`‚úÖ Message processed for bot ${bot.name}`);\n  } catch (error) {\n    console.error(\"‚ùå Error handling incoming message:\", error);\n  }\n}\n\n/**\n * Handle WhatsApp message status updates\n */\nasync function handleMessageStatus(status: any) {\n  try {\n    const messageId = status.id;\n    const newStatus = status.status; // sent, delivered, read, failed\n\n    // Update message status in database\n    await prisma.message.updateMany({\n      where: { whatsappMessageId: messageId },\n      data: { whatsappStatus: newStatus },\n    });\n\n    console.log(`üìä Message ${messageId} status updated to: ${newStatus}`);\n  } catch (error) {\n    console.error(\"‚ùå Error updating message status:\", error);\n  }\n}\n\n/**\n * Extract text content from various message types\n */\nfunction getMessageContent(message: any): string {\n  switch (message.type) {\n    case \"text\":\n      return message.text?.body || \"\";\n    case \"image\":\n      return message.image?.caption || \"[Bild]\";\n    case \"document\":\n      return message.document?.caption || `[Dokument: ${message.document?.filename}]`;\n    case \"audio\":\n      return \"[Sprachnachricht]\";\n    case \"video\":\n      return message.video?.caption || \"[Video]\";\n    case \"location\":\n      return `[Standort: ${message.location?.latitude}, ${message.location?.longitude}]`;\n    case \"contacts\":\n      return \"[Kontakt geteilt]\";\n    case \"interactive\":\n      if (message.interactive?.type === \"button_reply\") {\n        return message.interactive.button_reply.title;\n      }\n      if (message.interactive?.type === \"list_reply\") {\n        return message.interactive.list_reply.title;\n      }\n      return \"[Interaktive Nachricht]\";\n    default:\n      return `[${message.type}]`;\n  }\n}\n\n/**\n * Get media URL if message contains media\n */\nasync function getMediaUrl(message: any): Promise<string | null> {\n  try {\n    if (message.type === \"image\" && message.image?.id) {\n      return `/api/media/whatsapp/${message.image.id}`;\n    }\n    if (message.type === \"document\" && message.document?.id) {\n      return `/api/media/whatsapp/${message.document.id}`;\n    }\n    if (message.type === \"audio\" && message.audio?.id) {\n      return `/api/media/whatsapp/${message.audio.id}`;\n    }\n    if (message.type === \"video\" && message.video?.id) {\n      return `/api/media/whatsapp/${message.video.id}`;\n    }\n    return null;\n  } catch (error) {\n    console.error(\"‚ùå Error getting media URL:\", error);\n    return null;\n  }\n}\n","import { AppRouteRouteModule } from \"next/dist/esm/server/route-modules/app-route/module.compiled\";\nimport { RouteKind } from \"next/dist/esm/server/route-kind\";\nimport { patchFetch as _patchFetch } from \"next/dist/esm/server/lib/patch-fetch\";\nimport { getRequestMeta } from \"next/dist/esm/server/request-meta\";\nimport { getTracer, SpanKind } from \"next/dist/esm/server/lib/trace/tracer\";\nimport { normalizeAppPath } from \"next/dist/esm/shared/lib/router/utils/app-paths\";\nimport { NodeNextRequest, NodeNextResponse } from \"next/dist/esm/server/base-http/node\";\nimport { NextRequestAdapter, signalFromNodeResponse } from \"next/dist/esm/server/web/spec-extension/adapters/next-request\";\nimport { BaseServerSpan } from \"next/dist/esm/server/lib/trace/constants\";\nimport { getRevalidateReason } from \"next/dist/esm/server/instrumentation/utils\";\nimport { sendResponse } from \"next/dist/esm/server/send-response\";\nimport { fromNodeOutgoingHttpHeaders, toNodeOutgoingHttpHeaders } from \"next/dist/esm/server/web/utils\";\nimport { getCacheControlHeader } from \"next/dist/esm/server/lib/cache-control\";\nimport { INFINITE_CACHE, NEXT_CACHE_TAGS_HEADER } from \"next/dist/esm/lib/constants\";\nimport { NoFallbackError } from \"next/dist/esm/shared/lib/no-fallback-error.external\";\nimport { CachedRouteKind } from \"next/dist/esm/server/response-cache\";\nimport * as userland from \"INNER_APP_ROUTE\";\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new AppRouteRouteModule({\n    definition: {\n        kind: RouteKind.APP_ROUTE,\n        page: \"/api/webhooks/whatsapp/route\",\n        pathname: \"/api/webhooks/whatsapp\",\n        filename: \"route\",\n        bundlePath: \"\"\n    },\n    distDir: process.env.__NEXT_RELATIVE_DIST_DIR || '',\n    relativeProjectDir: process.env.__NEXT_RELATIVE_PROJECT_DIR || '',\n    resolvedPagePath: \"[project]/botchat-pro/app/api/webhooks/whatsapp/route.ts\",\n    nextConfigOutput,\n    userland\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return _patchFetch({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\nexport { routeModule, workAsyncStorage, workUnitAsyncStorage, serverHooks, patchFetch,  };\nexport async function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/webhooks/whatsapp/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (process.env.TURBOPACK) {\n        srcPage = srcPage.replace(/\\/index$/, '') || '/';\n    } else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = process.env.__NEXT_MULTI_ZONE_DRAFT_MODE;\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = normalizeAppPath(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = getTracer();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: getRequestMeta(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new NodeNextRequest(req);\n    const nodeNextRes = new NodeNextResponse(res);\n    const nextReq = NextRequestAdapter.fromNodeNextRequest(nodeNextReq, signalFromNodeResponse(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!getRequestMeta(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = toNodeOutgoingHttpHeaders(response.headers);\n                        if (cacheTags) {\n                            headers[NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await sendResponse(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: getRevalidateReason({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!getRequestMeta(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = fromNodeOutgoingHttpHeaders(cacheEntry.value.headers);\n            if (!(getRequestMeta(req, 'minimalMode') && isIsr)) {\n                headers.delete(NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', getCacheControlHeader(cacheEntry.cacheControl));\n            }\n            await sendResponse(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        // if we aren't wrapped by base-server handle here\n        if (!activeSpan && !(err instanceof NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: getRevalidateReason({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await sendResponse(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n","// BotChat Pro - Bot Execution Engine\n// Processes incoming messages and executes bot flows\n\nimport { prisma } from \"@/lib/prisma\";\nimport { whatsapp } from \"@/lib/whatsapp\";\nimport type { Bot, BotFlow, Message } from \"@prisma/client\";\n\ninterface BotWithFlows extends Bot {\n  flows: BotFlow[];\n}\n\ninterface FlowNode {\n  id: string;\n  type: string;\n  data: any;\n  position: { x: number; y: number };\n}\n\ninterface FlowEdge {\n  id: string;\n  source: string;\n  target: string;\n  data?: any;\n}\n\ninterface BotContext {\n  bot: BotWithFlows;\n  contactPhone: string;\n  lastMessage: Message;\n  currentFlow?: BotFlow;\n  currentNode?: string;\n  variables: Record<string, any>;\n}\n\n/**\n * Main function to process incoming messages\n */\nexport async function processIncomingMessage(\n  bot: BotWithFlows,\n  incomingMessage: any,\n  messageRecord: Message\n): Promise<void> {\n  try {\n    const context: BotContext = {\n      bot,\n      contactPhone: messageRecord.contactPhone || \"\",\n      lastMessage: messageRecord,\n      variables: {},\n    };\n\n    // Get or create conversation state\n    const conversationState = await getConversationState(context);\n    context.currentFlow = conversationState.currentFlow || undefined;\n    context.currentNode = conversationState.currentNode || undefined;\n    context.variables = conversationState.variables;\n\n    // Find matching flow if no current flow\n    if (!context.currentFlow) {\n      context.currentFlow = (await findMatchingFlow(context, messageRecord.content)) || undefined;\n    }\n\n    // If still no flow, use fallback\n    if (!context.currentFlow) {\n      await sendFallbackMessage(context);\n      return;\n    }\n\n    // Execute the current flow\n    await executeFlow(context);\n\n  } catch (error) {\n    console.error(\"‚ùå Error processing message:\", error);\n    await sendErrorMessage(bot, messageRecord.contactPhone!);\n  }\n}\n\n/**\n * Get or create conversation state for a contact\n */\nasync function getConversationState(context: BotContext) {\n  // For now, we'll use a simple approach\n  // In production, you might want to store this in Redis or a dedicated table\n  \n  // Check if there's a recent conversation\n  const recentMessage = await prisma.message.findFirst({\n    where: {\n      botId: context.bot.id,\n      contactPhone: context.contactPhone,\n      direction: \"outgoing\",\n      createdAt: {\n        gte: new Date(Date.now() - 30 * 60 * 1000), // 30 minutes\n      },\n    },\n    orderBy: { createdAt: 'desc' },\n  });\n\n  if (recentMessage) {\n    // Try to find current flow from the context\n    // This is simplified - in production you'd store flow state\n    return {\n      currentFlow: null,\n      currentNode: null,\n      variables: {},\n    };\n  }\n\n  return {\n    currentFlow: null,\n    currentNode: null,\n    variables: {},\n  };\n}\n\n/**\n * Find a flow that matches the incoming message\n */\nasync function findMatchingFlow(context: BotContext, messageContent: string): Promise<BotFlow | null> {\n  const { flows } = context.bot;\n  \n  // Check for keyword triggers\n  for (const flow of flows) {\n    if (flow.triggerType === \"keyword\" && flow.triggerValue) {\n      const keywords = flow.triggerValue.toLowerCase().split(\",\").map(k => k.trim());\n      const messageWords = messageContent.toLowerCase().split(/\\s+/);\n      \n      for (const keyword of keywords) {\n        if (messageWords.includes(keyword)) {\n          return flow;\n        }\n      }\n    }\n  }\n\n  // Check for \"always\" triggers (greeting flow)\n  const alwaysFlow = flows.find(flow => flow.triggerType === \"always\");\n  if (alwaysFlow) {\n    return alwaysFlow;\n  }\n\n  return null;\n}\n\n/**\n * Execute a bot flow\n */\nasync function executeFlow(context: BotContext): Promise<void> {\n  if (!context.currentFlow) return;\n\n  try {\n    const flowData = context.currentFlow.nodes as unknown as { nodes: FlowNode[]; edges: FlowEdge[] };\n    const { nodes, edges } = flowData;\n\n    // Find start node if no current node\n    let currentNode = context.currentNode \n      ? nodes.find(n => n.id === context.currentNode)\n      : nodes.find(n => n.type === \"start\");\n\n    if (!currentNode) {\n      console.error(\"‚ùå No start node found in flow\");\n      return;\n    }\n\n    // Execute nodes in sequence\n    let maxSteps = 10; // Prevent infinite loops\n    while (currentNode && maxSteps > 0) {\n      maxSteps--;\n\n      const result = await executeNode(context, currentNode);\n      \n      if (result.stop) {\n        break;\n      }\n\n      // Find next node\n      const nextEdge = edges.find(e => e.source === currentNode!.id);\n      if (!nextEdge) {\n        break;\n      }\n\n      currentNode = nodes.find(n => n.id === nextEdge.target);\n    }\n\n  } catch (error) {\n    console.error(\"‚ùå Error executing flow:\", error);\n    throw error;\n  }\n}\n\n/**\n * Execute a single flow node\n */\nasync function executeNode(context: BotContext, node: FlowNode): Promise<{ stop?: boolean }> {\n  switch (node.type) {\n    case \"start\":\n      // Start node - just continue to next\n      return {};\n\n    case \"message\":\n      await sendTextMessage(context, node.data.text || node.data.message);\n      return {};\n\n    case \"condition\":\n      // TODO: Implement condition logic\n      return {};\n\n    case \"collect_input\":\n      // TODO: Implement input collection\n      await sendTextMessage(context, node.data.prompt || \"Bitte antworten Sie:\");\n      return { stop: true }; // Wait for user input\n\n    case \"api_call\":\n      // TODO: Implement API calls\n      return {};\n\n    case \"delay\":\n      // TODO: Implement delays\n      return {};\n\n    case \"end\":\n      return { stop: true };\n\n    default:\n      console.warn(`‚ö†Ô∏è  Unknown node type: ${node.type}`);\n      return {};\n  }\n}\n\n/**\n * Send a text message through the bot\n */\nasync function sendTextMessage(context: BotContext, text: string): Promise<void> {\n  try {\n    if (!context.bot.whatsappPhoneId || !context.bot.whatsappToken) {\n      console.error(\"‚ùå Bot not configured for WhatsApp\");\n      return;\n    }\n\n    // Replace variables in text\n    const processedText = replaceVariables(text, context.variables);\n\n    // Send via WhatsApp API\n    await whatsapp.sendTextMessage(\n      context.bot.whatsappPhoneId,\n      context.contactPhone,\n      processedText\n    );\n\n    // Store outgoing message\n    await prisma.message.create({\n      data: {\n        direction: \"outgoing\",\n        content: processedText,\n        contactPhone: context.contactPhone,\n        botId: context.bot.id,\n      },\n    });\n\n    console.log(`üì§ Sent: ${processedText.substring(0, 50)}...`);\n\n  } catch (error) {\n    console.error(\"‚ùå Error sending message:\", error);\n    throw error;\n  }\n}\n\n/**\n * Send fallback message when no flow matches\n */\nasync function sendFallbackMessage(context: BotContext): Promise<void> {\n  const fallbackText = context.bot.fallbackMessage || \n    \"Entschuldigung, ich habe das nicht verstanden. K√∂nnen Sie das anders formulieren?\";\n  \n  await sendTextMessage(context, fallbackText);\n}\n\n/**\n * Send error message when something goes wrong\n */\nasync function sendErrorMessage(bot: Bot, contactPhone: string): Promise<void> {\n  try {\n    if (!bot.whatsappPhoneId) return;\n\n    const errorText = \"Es tut mir leid, es ist ein technischer Fehler aufgetreten. Bitte versuchen Sie es sp√§ter erneut.\";\n    \n    await whatsapp.sendTextMessage(bot.whatsappPhoneId, contactPhone, errorText);\n\n    // Store error message\n    await prisma.message.create({\n      data: {\n        direction: \"outgoing\",\n        content: errorText,\n        contactPhone,\n        botId: bot.id,\n      },\n    });\n\n  } catch (error) {\n    console.error(\"‚ùå Error sending error message:\", error);\n  }\n}\n\n/**\n * Replace variables in text (e.g., {{name}} -> John)\n */\nfunction replaceVariables(text: string, variables: Record<string, any>): string {\n  return text.replace(/\\{\\{(\\w+)\\}\\}/g, (match, varName) => {\n    return variables[varName] || match;\n  });\n}\n\n/**\n * Create a simple text flow for testing\n */\nexport function createSimpleFlow(botId: string, welcomeMessage: string) {\n  return {\n    name: \"Willkommens-Flow\",\n    description: \"Einfacher Begr√º√üungsflow\",\n    triggerType: \"always\",\n    botId,\n    nodes: {\n      nodes: [\n        {\n          id: \"start\",\n          type: \"start\",\n          data: { label: \"Start\" },\n          position: { x: 100, y: 100 },\n        },\n        {\n          id: \"welcome\",\n          type: \"message\",\n          data: { text: welcomeMessage },\n          position: { x: 300, y: 100 },\n        },\n        {\n          id: \"end\",\n          type: \"end\",\n          data: { label: \"Ende\" },\n          position: { x: 500, y: 100 },\n        },\n      ],\n      edges: [\n        { id: \"e1\", source: \"start\", target: \"welcome\" },\n        { id: \"e2\", source: \"welcome\", target: \"end\" },\n      ],\n    },\n  };\n}\n\nexport type { BotContext, FlowNode, FlowEdge };\n","// BotChat Pro - WhatsApp Business API Integration\n// 360dialog EU BSP f√ºr DSGVO-konforme WhatsApp Kommunikation\n\ninterface WhatsAppMessage {\n  to: string;\n  type: \"text\" | \"template\" | \"image\" | \"document\";\n  text?: {\n    body: string;\n  };\n  template?: {\n    name: string;\n    language: {\n      code: string;\n    };\n    components?: any[];\n  };\n  image?: {\n    link: string;\n    caption?: string;\n  };\n  document?: {\n    link: string;\n    filename: string;\n    caption?: string;\n  };\n}\n\ninterface WhatsAppWebhookMessage {\n  id: string;\n  from: string;\n  timestamp: string;\n  type: \"text\" | \"image\" | \"document\" | \"audio\" | \"video\";\n  text?: {\n    body: string;\n  };\n  image?: {\n    id: string;\n    mime_type: string;\n    sha256: string;\n    caption?: string;\n  };\n  document?: {\n    id: string;\n    filename: string;\n    mime_type: string;\n    sha256: string;\n    caption?: string;\n  };\n}\n\nclass WhatsAppAPI {\n  private apiUrl: string;\n  private accessToken: string;\n\n  constructor(apiUrl: string = process.env.WHATSAPP_API_URL!, accessToken: string = process.env.WHATSAPP_API_TOKEN!) {\n    this.apiUrl = apiUrl;\n    this.accessToken = accessToken;\n  }\n\n  /**\n   * Send a WhatsApp message\n   */\n  async sendMessage(phoneNumberId: string, message: WhatsAppMessage): Promise<any> {\n    try {\n      const response = await fetch(`${this.apiUrl}/v1/messages`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.accessToken}`,\n          'Content-Type': 'application/json',\n          'D360-API-KEY': this.accessToken, // 360dialog specific header\n        },\n        body: JSON.stringify({\n          messaging_product: \"whatsapp\",\n          ...message,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`WhatsApp API Error: ${response.status} ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Failed to send WhatsApp message:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Send a simple text message\n   */\n  async sendTextMessage(phoneNumberId: string, to: string, text: string): Promise<any> {\n    return this.sendMessage(phoneNumberId, {\n      to,\n      type: \"text\",\n      text: { body: text },\n    });\n  }\n\n  /**\n   * Send a template message\n   */\n  async sendTemplateMessage(\n    phoneNumberId: string,\n    to: string,\n    templateName: string,\n    languageCode: string = \"de\",\n    components?: any[]\n  ): Promise<any> {\n    return this.sendMessage(phoneNumberId, {\n      to,\n      type: \"template\",\n      template: {\n        name: templateName,\n        language: { code: languageCode },\n        components,\n      },\n    });\n  }\n\n  /**\n   * Download media from WhatsApp\n   */\n  async downloadMedia(mediaId: string): Promise<Buffer> {\n    try {\n      // First, get the media URL\n      const mediaResponse = await fetch(`${this.apiUrl}/v1/media/${mediaId}`, {\n        headers: {\n          'Authorization': `Bearer ${this.accessToken}`,\n          'D360-API-KEY': this.accessToken,\n        },\n      });\n\n      if (!mediaResponse.ok) {\n        throw new Error(`Failed to get media URL: ${mediaResponse.status}`);\n      }\n\n      const { url } = await mediaResponse.json();\n\n      // Then download the actual media\n      const downloadResponse = await fetch(url, {\n        headers: {\n          'Authorization': `Bearer ${this.accessToken}`,\n          'D360-API-KEY': this.accessToken,\n        },\n      });\n\n      if (!downloadResponse.ok) {\n        throw new Error(`Failed to download media: ${downloadResponse.status}`);\n      }\n\n      return Buffer.from(await downloadResponse.arrayBuffer());\n    } catch (error) {\n      console.error('Failed to download WhatsApp media:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Upload media to WhatsApp\n   */\n  async uploadMedia(phoneNumberId: string, media: Buffer, type: string, filename?: string): Promise<string> {\n    try {\n      const formData = new FormData();\n      formData.append('messaging_product', 'whatsapp');\n      formData.append('file', new Blob([new Uint8Array(media)], { type }), filename || 'file');\n      formData.append('type', type);\n\n      const response = await fetch(`${this.apiUrl}/v1/media`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.accessToken}`,\n          'D360-API-KEY': this.accessToken,\n        },\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to upload media: ${response.status}`);\n      }\n\n      const { id } = await response.json();\n      return id;\n    } catch (error) {\n      console.error('Failed to upload WhatsApp media:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Mark message as read\n   */\n  async markAsRead(phoneNumberId: string, messageId: string): Promise<any> {\n    try {\n      const response = await fetch(`${this.apiUrl}/v1/messages`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.accessToken}`,\n          'Content-Type': 'application/json',\n          'D360-API-KEY': this.accessToken,\n        },\n        body: JSON.stringify({\n          messaging_product: \"whatsapp\",\n          status: \"read\",\n          message_id: messageId,\n        }),\n      });\n\n      return response.ok;\n    } catch (error) {\n      console.error('Failed to mark message as read:', error);\n      return false;\n    }\n  }\n}\n\n/**\n * Validate WhatsApp webhook signature (for security)\n */\nexport function validateWebhookSignature(\n  payload: string,\n  signature: string,\n  secret: string = process.env.WHATSAPP_WEBHOOK_SECRET!\n): boolean {\n  try {\n    const crypto = require('crypto');\n    const expectedSignature = crypto\n      .createHmac('sha256', secret)\n      .update(payload)\n      .digest('hex');\n    \n    return signature === `sha256=${expectedSignature}`;\n  } catch (error) {\n    console.error('Failed to validate webhook signature:', error);\n    return false;\n  }\n}\n\n/**\n * Extract phone number from WhatsApp format (+49123456789 -> 49123456789)\n */\nexport function normalizePhoneNumber(phone: string): string {\n  return phone.replace(/^\\+/, '').replace(/\\D/g, '');\n}\n\n/**\n * Format phone number for display (+49123456789)\n */\nexport function formatPhoneNumber(phone: string): string {\n  const normalized = normalizePhoneNumber(phone);\n  return `+${normalized}`;\n}\n\n// Export singleton instance\nexport const whatsapp = new WhatsAppAPI();\n\n// Export types\nexport type { WhatsAppMessage, WhatsAppWebhookMessage };\n"],"names":[],"mappings":"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","ignoreList":[1]}